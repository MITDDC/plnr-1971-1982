;-*- MODE: LISP; PACKAGE:USER; BASE: 8-*-

(DEFUN DOLLAR-READ-MACRO (IGNORE STREAM)
  (LET ((CH (FUNCALL STREAM ':TYI)))
    (COND ((= CH #/?)
	   `(VAR ,(READ STREAM)))
	  (T (FERROR NIL "bad char after $")))))

;(DEFVAR FILE-READTABLE (COPY-READTABLE SI:INITIAL-READTABLE))

(SET-SYNTAX-MACRO-CHAR #/$ 'DOLLAR-READ-MACRO)

(DEFVAR TWO-ELEMENT-ASSERTIONS-LIST NIL)

(DEFVAR TWO-ELEMENT-CONSEQUENTS-LIST NIL)

(DEFMACRO CURRENT-BINDING-LIST (VL)
  `(COMPILER:%BINDING-INSTANCES ,VL))

(DEFMACRO IVC (X)
  `(COMPILER:%INTERNAL-VALUE-CELL ,X))

(DEFUN CALL-CONTINUATION (CONT VALUE ENV)
  (COMPILER:%USING-BINDING-INSTANCES ENV)
  (FUNCALL CONT VALUE ENV))

(DEFUN SETUP NIL
  (thasst-2 'thconse-2-a)   ;assert (human x) -> (fallible x)
  (thasst-2 'thconse-2-b)   ;assert (greek x) -> (human x)
  (thass-2 'greek 'socrates))

(DEFVAR THPROG-CONTINUATION)		;who THRETURN should call with the value
(DEFVAR THPROG-ENV)
(DEFVAR THPROG-TAG-ALIST)

(DEFMACRO MICROPLANNER (EXP)
  `(*CATCH 'MICROPLANNER
     ,(EXPAND-BODY NIL (APPEND EXP '((MICROPLANNER-GOAL))))))

(DEFUN (MICROPLANNER-GOAL PATTERN-EXPANDER) (CONT ENV STEP) CONT ENV STEP
  'MICROPLANNER-GOAL)

(DEFUN MICROPLANNER-GOAL (VALUE ENV) ENV
 (*THROW 'MICROPLANNER VALUE))

(DEFUN EXPAND-BODY (ENV STATEMENTS)
  (COND ((NULL STATEMENTS) NIL)
	(T (EXPAND-BODY-STATEMENT ENV (CAR STATEMENTS) (CDR STATEMENTS)))))

(DEFUN EXPAND-BODY-STATEMENT (ENV STATEMENT CONTINUATION-STATEMENTS)
  (COND ((ATOM STATEMENT)
	 (EXPAND-BODY ENV CONTINUATION-STATEMENTS))
	(T 
	 (LET ((EXPAND-FN (GET (CAR STATEMENT) 'PATTERN-EXPANDER)))
	   (IF (NULL EXPAND-FN) (FERROR NIL "~S has no expander" STATEMENT)
	       (FUNCALL EXPAND-FN CONTINUATION-STATEMENTS ENV STATEMENT))))))

(DEFUN (THPROG PATTERN-EXPANDER) (CONTINUATION-STATEMENTS ENV STEP)
  (LET ((VARS (CADR STEP))
	(BODY (CDDR STEP)))
    (LET ((THPROG-TAG-ALIST (MAKE-THPROG-ALIST BODY))
	  (THPROG-ENV ENV)
	  (THPROG-CONTINUATION CONTINUATION-STATEMENTS))
      `(LOCAL-DECLARE ((SPECIAL ,@VARS))
	 (LET ,(MAPCAR (FUNCTION (LAMBDA (X) `(,X 'UNASSIGNED))) VARS)
	   ,(EXPAND-BODY `(CURRENT-BINDING-LIST ',VARS) BODY))))))

(DEFUN (THRETURN PATTERN-EXPANDER) (CONTINUATION-STATEMENTS ENV STEP)
  CONTINUATION-STATEMENTS ENV
  `(,(EXPAND-CONTINUATION THPROG-CONTINUATION)
    ,(EXPAND-PATTERN-ELEMENT (CADR STEP))
    ,THPROG-ENV))

(DEFUN MAKE-THPROG-ALIST (BODY)
  (LET ((ANS NIL))
    (DOLIST (E BODY)
      (IF (ATOM BODY)
	  (PUSH (CONS E (GENSYM)) ANS)))
    ANS))

(DEFUN (THGOAL PATTERN-EXPANDER) (CONTINUATION-STATEMENTS ENV STEP)
  `(LOOP-THGOAL-2 ,ENV
	     ,(EXPAND-PATTERN-ELEMENT (FIRST (SECOND STEP)))
	     ,(EXPAND-PATTERN-ELEMENT (SECOND (SECOND STEP)))
	     ,(EXPAND-CONTINUATION CONTINUATION-STATEMENTS)))

(DEFUN EXPAND-CONTINUATION (CONT)
  (IF (SYMBOLP CONT) CONT
      `(FUNCTION (LAMBDA (E VALUE)
		   ,(EXPAND-BODY 'E CONT)))))


(DEFMACRO THFINDALL (VAR &REST BODY)
  `(LOCAL-DECLARE ((SPECIAL ANS ,VAR))
     (LET ((ANS NIL) (,VAR 'UNASSIGNED))
       ,(EXPAND-PATTERN-BODY `(CURRENT-BINDING-LIST '(ANS ,VAR))
			     (APPEND BODY `((THFINDALL-COLLECT ,VAR))))
       ANS)))

(DEFUN (THAMONG PATTERN-EXPANDER) (ENV STEP CONT)
  `(LOOP-THAMONG ,ENV
    ,(EXPAND-PATTERN-ELEMENT (SECOND STEP))
    ,(THIRD STEP)
    ,(EXPAND-CONTINUATION CONT)))

(DEFUN EXPAND-PATTERN-ELEMENT (E)
  (COND ((ATOM E) `',E)
	((EQ (CAR E) 'VAR)
	 `(IVC ',(CADR E)))
	(T (FERROR NIL "Cant expand pattern element ~s" E))))

(DEFUN (THFINDALL-COLLECT PATTERN-EXPANDER) (ENV STEP CONT) ENV CONT
       `(SETQ ANS (CONS ,(CADR STEP) ANS)))

(DEFUN MTRY NIL
  (MICROPLANNER 
    (  (THPROG (X)
	    (THGOAL (FALLIBLE $?X))
	    (THGOAL (GREEK $?X))
	    (THRETURN $?X)) )))

(DEFUN TRY NIL 
  (*CATCH 'MICROPLANNER
    (LOCAL-DECLARE ((SPECIAL X))
      (LET ((X 'UNASSIGNED))
 	(LOOP-THGOAL-2 (CURRENT-BINDING-LIST '(X))
		  'FALLIBLE (ivc 'X)
		  (FUNCTION (LAMBDA (VALUE E) VALUE
			      (LOOP-THGOAL-2 E
			       'GREEK (ivc 'X)
			       (FUNCTION (LAMBDA (VALUE E) VALUE 
					  (MICROPLANNER-GOAL X E)))))))))))

(DEFUN MTRY1 NIL
  (THFINDALL X (THGOAL (FALLIBLE $?X))))

(DEFUN TRY1 NIL 
  (LOCAL-DECLARE ((SPECIAL X ANS))
    (LET ((X 'UNASSIGNED)
	  (ANS NIL))
      (LOOP-THGOAL-2 (CURRENT-BINDING-LIST '(X ANS))
		'FALLIBLE (ivc 'X)
		(FUNCTION (LAMBDA (E) E
				  (SETQ ANS (CONS X ANS)))))
      ANS)))

;(THCONSE (X) (FALLIBLE $?X)
;  (THGOAL (HUMAN $?X)))
(LOCAL-DECLARE ((SPECIAL P1 P2))
(DEFUN THCONSE-2-A (VAR-ENV CONT P1 P2)
   (COND ((EQ P1 'FALLIBLE)
	  (LOOP-THGOAL-2 VAR-ENV 'HUMAN (ivc 'P2) CONT)))))

;(THCONSE (X) (HUMAN $?X)
;  (THGOAL (GREEK $?X)))
(LOCAL-DECLARE ((SPECIAL P1 P2))
(DEFUN THCONSE-2-B (VAR-ENV CONT P1 P2) 
   (COND ((EQ P1 'HUMAN)
	  (LOOP-THGOAL-2 VAR-ENV 'GREEK (ivc 'P2) CONT)))))

(DEFUN THASS-2 (L1 L2 &AUX ASS)   ;SIMPLE ASSERTION, TWO LONG
   (SETQ ASS (LIST L1 L2))
   (COND ((NOT (MEMBER ASS TWO-ELEMENT-ASSERTIONS-LIST))
	  (SETQ TWO-ELEMENT-ASSERTIONS-LIST 
		(CONS ASS TWO-ELEMENT-ASSERTIONS-LIST)))))

(DEFUN THASST-2 (TH)		;ASSERT CONSEQUENT THEOREM, TWO LONG
   (COND ((NOT (MEMQ TH TWO-ELEMENT-CONSEQUENTS-LIST))
	  (SETQ TWO-ELEMENT-CONSEQUENTS-LIST 
		(CONS TH TWO-ELEMENT-CONSEQUENTS-LIST)))))

(LOCAL-DECLARE ((SPECIAL E1 E2))
(DEFUN LOOP-THGOAL-2 (VAR-ENV E1 E2 CONT)    ;ACHIEVE GOAL, TWO LONG
  (FORMAT T "~%THGOAL: ~s (dtp ~s) ~s (dtp ~s) "
	  E1 (%DATA-TYPE (ivc 'E1))
	  E2 (%DATA-TYPE (ivc 'E2)))
   (DOLIST (AS TWO-ELEMENT-ASSERTIONS-LIST)
       (COND ((EQ E1 'UNASSIGNED)
	      (SETQ E1 (FIRST AS))
	      (COND ((EQ E2 'UNASSIGNED)
		     (SETQ E2 (SECOND AS))
		     (CALL-CONTINUATION CONT AS VAR-ENV)
		     (SETQ E2 'UNASSIGNED))
		    ((EQ E2 (SECOND AS))
		     (CALL-CONTINUATION CONT AS VAR-ENV)))
	      (SETQ E1 'UNASSIGNED))
	     ((EQ E1 (FIRST AS))
	      (COND ((EQ E2 'UNASSIGNED)
		     (SETQ E2 (SECOND AS))
		     (CALL-CONTINUATION CONT AS VAR-ENV)
		     (SETQ E2 'UNASSIGNED))
		    ((EQ E2 (SECOND AS))
		     (CALL-CONTINUATION CONT AS VAR-ENV))))))
   (DOLIST (TH TWO-ELEMENT-CONSEQUENTS-LIST)
     ;(FORMAT T "~%Trying consequent theorm (~s ~s ~s)" TH E1 E2)
     (FUNCALL TH VAR-ENV CONT (ivc 'E1) (ivc 'E2)))))



(LOCAL-DECLARE ((SPECIAL V))
(DEFUN LOOP-THAMONG (VAR-ENV V LIST CONT)    ;ACHIEVE GOAL, TWO LONG
  (FORMAT T "~%THAMONG: ~S (DTP ~S) ~S" V (%DATA-TYPE (IVC 'V)) LIST)
  (COND ((NEQ V 'UNASSIGNED)
	 (COND ((MEMBER V LIST)
		(CALL-CONTINUATION CONT VAR-ENV))))
	(T (DOLIST (L-E LIST)
	     (SETQ V L-E)
	     (CALL-CONTINUATION CONT VAR-ENV))
	   (SETQ V 'UNASSIGNED)))))
