;save your THCONSEs and THANTEs, MICRO-PLANNER will rise again.  -*-LISP-*-

;A QUICK IMPLEMENTATION.  HOPEFULLY FIXES A FEW OF THE GROSSER BUGS OF THE ORIGINAL.

;A POINT:  NOT TRYING TO DO "TRUTH MAINTAINENCE" JUST GENERALIZED LAMBDA BINDING.

;EQUATION-LIKE NATURE OF GENERALIZED-ASSERTIONS
;(THCONSE (X Y)
;  ($?X CHASES $?Y)
;  (THGOAL ($?X IS-A CAT))
;  (THGOAL ($?X IS-A BIRD)) )

;CAN HELP US EITHER WITH (SYLVESTER CHASES $?WHAT) OR ($?WHAT CHASES TWEEDY)

;DYNAMIC LOOP NESTING:
;  EACH APPEARANCE OF A VARIABLE IN A THGOAL POTENTIALLY REPRESENTS A LOOP.
;CONSIDER (THFIND ($?X) 
;	     (THGOAL (IS-A $?X BLOCK))
;	     (THGOAL (COLOR-OF $?X RED))
;	     (THGOAL (SIZE-OF $?X BIG))) ETC.
;  CLEARLY, THE ORDER OF NESTING OF THE LOOPS CAN GREATLY AFFECT THE TOTAL
;AMOUNT OF COMPUTATION.  WE WISH TO EXPRESS THE CONCEPT IN SUCH A FORM THAT
;THIS ORDER CAN BE MADE DYNAMIC AT RUN TIME.  IN THE PRESENCE OF FINITE EFFORT
;(IE WE DONT REALLY LOOP OVER EVERYTHING IN THE WORLD TO SEE IF IT IS A BLOCK, ETC)
;DYNAMIC LOOP NESTING BECOMES THE NAME OF THE WHOLE GAME.
; (THGOALS ((IS-A $?X BLOCK) ) ((COLOR-OF $?X RED) ) ... )

;MAJOR DIFFERENCES:

;  LISP VARIABLES AND MICRO-PLANNER VARIABLES ARE THE SAME.  EXTERNAL-VALUE CELL
;POINTERS ARE USED TO EFFECT VARIABLE LINKING, ETC.  ALSO, THE E-V-P CAN SOMETIMES
;POINT TO A BLOCK INSTEAD OF JUST A SINGLE CELL.  THIS IS USED FOR RESTRICTIONS, ETC.
;(BUT NOT IMPLEMENTED INITIALLY). 

;  T VS NIL AS RETURNNED VALUE NO LONGER CORRELATES WITH SUCCESS VS FAILURE.
;     TO "SUCCEED", ONE FUNCALLS THE CONTINUATION.
;     FAILURE IS (*THROW 'FAILURE-POINT ...), WHICH INVOKES THE FAILURE
;      HANDLER.

;  THTREE IS REPLACED BY UNDO-STACK, WHICH IS AN ARRAY PUSH DOWN LIST.
;THE LAST Q OF EACH ENTRY IS THE KEY, WHICH IS FUNCALLED TO UNWIND.  IT IS
;RESPONSIBLE FOR POPPING THE REST OF THE DATA PUSHED BY THAT ENTRY, ETC.

;  FAILURE-POINT-INDEX IS THE UNDO-STACK INDEX OF THE MOST RECENT FAILURE-POINT
;(IE (*CATCH 'FAILURE-POINT  ...))

;  THPROGRAMS ARE BROKEN INTO "STATEMENTS", EACH OF WHICH IS A LISP FUNCTION.
;BASICALLY, ANYTHING THAT CAN ESTABLISH A FAILURE POINT MUST BE THE LAST
;THING IN A STATEMENT.  (THUS, THE CONTINUATION FROM A FAILURE-POINT IS 
;ALWAYS THE FIRST THING IN A STATEMENT).
;EACH STATEMENT "KNOWS" ITS SUCCEEDING STATEMENT.

;  THE THCALL - THRETURN MECHANISM OPERATES ON A SEPARATE STACK, CHANGES TO
;WHICH ARE REFLECTED IN THE UNDO-STACK.

(DEFUN THAMONG (C X L)
  (COND ((THASSIGNED-P X)
	 (THREFLECT C (MEMBER X L)))
	(T 
	 (THESTABLISH-FAIL-POINT C 
	  (CLOSED-FUNCTIONAL (X L) (XF) NIL 
	    (FUNCTION (LAMBDA NIL 
	       (PROG NIL 
		     (COND ((NULL L) (THFAIL)))
		     (SETQ XF (THSETQ-LEVEL X (CAR L) XF))
		     (SETQ L (CDR L))
		     (RETURN X)) )) ))
	 (THFAIL))))


; THDEFUN DOES A RATHER GROSS OPERATION:  IT SPLITS EACH "STATEMENT"
;OFF INTO ITS OWN LISP FUNCTION!  THIS IS AN ATTEMPT TO GET THE "PC"
;INTO A FORM DEALABLE WITH BY LISP.

(THDEFUN THTEST NIL 
  (THAMONG 'FOO '(A B C))
  (PRINT 'FOO)
  (THFAIL))

;GENERALIZED LAMBDA.  A GENERALIZED LAMBDA ENCODES A NESTED LOOP
; STRUCTURE AS WELL AS NAME-BINDING.  IMPORTANTLY, THESE LOOPS
; CAN BE DYNAMICALLY RENESTED AT RUN TIME (IE, NO STATIC CHOICE IS
; NECESSARY AS TO WHICH ONE IS THE "INNER" ONE, ETC).  OPERATION OF
; GENERALIZED LAMBDA IS AS FOLLOWS: 
;   (1) THE PREVIOUS BINDINGS FOR ALL <VAR>S ARE SAVED, AND ALL
;       <VAR>S ARE SET TO THE UNASSIGNED  STATE.
;   (2) ALL <GENERATOR>S ARE CLOSED.  FOR SIMPLICITY, ASSUME EACH GENERATOR N
;	GENERATES THE ELEMENTS OF A LIST <L<I><N>>.  WE WISH EVENTUALLY
;       (IF THE PROCESS IS CARRIED TO ITS CONCLUSION) TO EXAMINE 
;       VAR<N> TO EACH OF <L<I><N>>, IN COMBINATION WITH EACH POSSIBLE
;       ASSIGNMENT OF THE OTHER <VAR>S, ETC.  OBVIOUSLY, THIS CAN
;       EXPLODE INTO AN AWFUL LOT OF COMPUTATION, SO WE MUST PUT HEAVY
;       EMPHASIS ON CONTROLLING THINGS.  THE COMPUTATION IN QUESTION
;       HAS TWO PARTS.  THE EASIEST TO DEAL WITH IS THE POSSIBILTY THAT 
;       EXP WILL GET EXECUTED MANY TIMES, ETC.  THIS IS RELATIVELY STRAIGTFORWARD
;       FOR THE USER TO CONTROL (FOR EXAMPLE, BY INSERTING COUNTERS IN EXP
;       AND *THROW ING OUT, ETC ETC).  MORE DIFFICULT TO CONTROL CAN BE
;       LOOP OVERHEAD.  ONE GENERATOR LOOPS OVER THE SET OF ALL PEOPLE,
;       WHILE THE SECOND SELECTS WHICH OF THOSE ARE IN THIS ROOM, ETC.
;       EFFORTS TO CONTROL LOOP COME UNDER TWO
;SAMPLE-SPACE SELECTION
;  THE CONTROLLER
;  MESSAGES TO THE GENERATORS
;    PRIMARY-INITIALIZATION
;    RESET
;    DUPLICATE-YOURSELF
;    ESTIMATE-YOUR-LENGTH
;    GENERATOR-MODE VS SELECTOR-MODE
;GENERATOR-HANDLES
;NEST-LIST
;OVERFLOW-HANDLER
;REPACKAGE-COMMAND
;	HEADINGS: ALGORITHMIC AND HEURISTIC.
;  ALGORITHMIC CONTROL
;    
; 
;(GLAMBDA ( (<VAR> (<HANDLE> <GENERATOR>) <FILTER>)
;	    (<VAR> <GENERATOR> <FILTER>)  ..)
;         <CONTROLLER>
;         (LIMIT <OVERFLOW-HANDLER>)
;  EXP)

;A GENERATOR CAN BE
;  A LIST
;  A NUMERIC RANGE SPEC
;  A FUNCTION WHICH EXPANDS INTO A CLOSURE, PROCESSING MESSAGES, ETC.

(DEFMACRO GLAMBDA (VAR-SPECS CONTROLLER LIMIT-SPECS EXP)
  (PROG (VARLIST HAIRY-CONTROLLER-FLAG LIMIT OVERFLOW-HANDLER)
        (SETQ VARLIST ())
	(COND ((NULL HAIRY-FLAG)
	       (RETURN `(LAMBDA ,VARLIST
				 
))

;THESTABLISH-FAIL-POINT  <FAILURE-STEPPER> <CONTINUATION> 
  ;PUSHES PREVIOUS FAIL-POINT-INDEX
;TAKES A CLOSURE AS ARG

;WHEN A FAILURE IS SIGNALED, EVERYTHING DONE SINCE THE LAST FAILURE-POINT WAS
; SET IS UNDONE.  (IE THE UNDO STACK IS UNWOUND TO THE LEVEL OF THE FAILURE POINT).
; THEN FAILURE-STEPPER STORED AT THAT LEVEL IS INVOKED.  IT CAN EITHER DECIDE
; IT HAS STEPPED ITS ALL, AND CONTINUE PROPAGATING FAILURE, OR IT CAN (PRESUMABLY)
; TRY SOMETHING ELSE, AND SIGNAL THAT AN ATTEMPT IS TO BE MADE TO SUCCEED FORWARD.
; IN THAT CASE, THE FAILURE-HANDLER CALLS THE CONTINUATION.