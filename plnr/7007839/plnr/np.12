;-*-LISP-*-

(SPECIAL ANS X SELF-ENV TWO-ELEMENT-ASSERTIONS-LIST TWO-ELEMENT-CONSEQUENTS-LIST 
	 E1 E2 P1 P2)

(COND ((NULL (BOUNDP 'TWO-ELEMENT-ASSERTIONS-LIST))
       (SETQ TWO-ELEMENT-ASSERTIONS-LIST NIL)))
(COND ((NULL (BOUNDP 'TWO-ELEMENT-CONSEQUENTS-LIST))
       (SETQ TWO-ELEMENT-CONSEQUENTS-LIST NIL)))

(DEFMACRO BINDING-CELL (VAR)
  `(%P-CONTENTS-OFFSET ,VAR 1))

(DEFMACRO FUNCALL-ENV (ENV FUN . ARGS)
  `(FUNCALL (%MAKE-POINTER DTP-CLOSURE (CONS ,FUN ,ENV))
	    ,@ARGS))

;(THPROG (X)
;  (THGOAL (FALLIBLE $?X))
;  (THGOAL (GREEK $?X))
;  (THRETURN $?X))
(DEFUN TRY NIL 
 (LET ((X 'UNASSIGNED)
       (SELF-ENV NIL))
      (SETQ SELF-ENV (CLOSE-VARIABLES '(X SELF-ENV)))
      (*CATCH 'G00XY
	 (THGOAL-2 'FALLIBLE (BINDING-CELL 'X)
		   SELF-ENV
		   (FUNCTION (LAMBDA NIL (THGOAL-2 'GREEK (BINDING-CELL 'X)
						   SELF-ENV
						   (FUNCTION (LAMBDA NIL 
							(*THROW 'G00XY X) )))))))))

;(THFINDALL X (THGOAL (FALLIBLE $?X)))
(DEFUN TRY1 NIL 
 (LET ((X 'UNASSIGNED)
       (SELF-ENV NIL)
       (ANS NIL))
      (SETQ SELF-ENV (CLOSE-VARIABLES '(X SELF-ENV ANS)))
      (THGOAL-2 'FALLIBLE (BINDING-CELL 'X)
		SELF-ENV 
		(FUNCTION (LAMBDA NIL 
				  (SETQ ANS (CONS X ANS)))))
      ANS))

;(THCONSE (X) (FALLIBLE $?X)
;  (THGOAL (HUMAN $?X)))
(DEFUN THCONSE-2-A (VAR-ENV CONT P1 P2)
   (COND ((EQ P1 'FALLIBLE)
	  (THGOAL-2 'HUMAN (BINDING-CELL 'P2) VAR-ENV CONT))))

(DEFUN CLOSE-VARIABLES (VL)
  (CDR (CLOSURE VL (FUNCTION CONS))))

(DEFUN THASS-2 (L1 L2 &AUX ASS)   ;SIMPLE ASSERTION, TWO LONG
   (SETQ ASS (LIST L1 L2))
   (COND ((NOT (MEMBER ASS TWO-ELEMENT-ASSERTIONS-LIST))
	  (SETQ TWO-ELEMENT-ASSERTIONS-LIST 
		(CONS ASS TWO-ELEMENT-ASSERTIONS-LIST)))))

(DEFUN THASST-2 (TH)		;ASSERT CONSEQUENT THEOREM, TWO LONG
   (COND ((NOT (MEMQ TH TWO-ELEMENT-CONSEQUENTS-LIST))
	  (SETQ TWO-ELEMENT-CONSEQUENTS-LIST 
		(CONS TH TWO-ELEMENT-CONSEQUENTS-LIST)))))

(DEFUN THGOAL-2 (E1 E2 VAR-ENV CONT)    ;ACHIEVE GOAL, TWO LONG
   (PRINT (LIST 'THGOAL E1 E2))
   (DO L1 TWO-ELEMENT-ASSERTIONS-LIST  (CDR L1) (NULL L1)
       (COND ((EQ E1 'UNASSIGNED)
	      (SETQ E1 (CAAR L1))
	      (COND ((EQ E2 'UNASSIGNED)
		     (SETQ E2 (CADAR L1))
		     (FUNCALL-ENV VAR-ENV CONT)
		     (SETQ E2 'UNASSIGNED))
		    ((EQ E2 (CADAR L1))
		     (FUNCALL-ENV VAR-ENV CONT)))
	      (SETQ E1 'UNASSIGNED))
	     ((EQ E1 (CAAR L1))
	      (COND ((EQ E2 'UNASSIGNED)
		     (SETQ E2 (CADAR L1))
		     (FUNCALL-ENV VAR-ENV CONT)
		     (SETQ E2 'UNASSIGNED))
		    ((EQ E2 (CADAR L1))
		     (FUNCALL-ENV VAR-ENV CONT))))))
   (DO L1 TWO-ELEMENT-CONSEQUENTS-LIST (CDR L1) (NULL L1)
       (FUNCALL (CAR L1) VAR-ENV CONT (BINDING-CELL 'E1) (BINDING-CELL 'E2))))
