;-*- MODE: LISP; PACKAGE:USER; BASE: 8-*-

(DEFVAR TWO-ELEMENT-ASSERTIONS-LIST NIL)

(DEFVAR TWO-ELEMENT-CONSEQUENTS-LIST NIL)

(DEFMACRO CURRENT-BINDING-LIST (VL)
  `(COMPILER:%BINDING-INSTANCES ,VL))

(DEFMACRO IVC (X)
  `(COMPILER:%INTERNAL-VALUE-CELL ,X))

(DEFMACRO FLN (&REST EXPS)
  `(FUNCTION (LAMBDA NIL ,@EXPS)))

(DEFUN CALL-CONTINUATION (CONT ENV)
  (COMPILER:%USING-BINDING-INSTANCES ENV)
  (FUNCALL CONT ENV))

(DEFUN SETUP NIL
  (thasst-2 'thconse-2-a)   ;assert (human x) -> (fallible x)
  (thasst-2 'thconse-2-b)   ;assert (greek x) -> (human x)
  (thass-2 'greek 'socrates))

(DEFMACRO THPROG ((VARS) . BODY)
 `(LOCAL-DECLARE ((SPECIAL ,@VARS))
    (LET (,(MAPCAR (FUNCTION (LAMBDA (X) `(,X UNASSIGNED))) VARS))
      )))

;(THPROG (X)
;  (THGOAL (FALLIBLE $?X))
;  (THGOAL (GREEK $?X))
;  (THRETURN $?X))
(DEFUN TRY NIL 
  (LOCAL-DECLARE ((SPECIAL X))
    (LET ((X 'UNASSIGNED))
      (*CATCH 'G00XY
	(THGOAL-2 (CURRENT-BINDING-LIST '(X))
		  'FALLIBLE (ivc 'X)
		  (FUNCTION (LAMBDA (E)
			      (THGOAL-2 E
					'GREEK (ivc 'X)
					(FUNCTION (LAMBDA (E) E
							  (*THROW 'G00XY X) ))))))))))

;(THFINDALL X (THGOAL (FALLIBLE $?X)))
(DEFUN TRY1 NIL 
  (LOCAL-DECLARE ((SPECIAL X ANS))
    (LET ((X 'UNASSIGNED)
	  (ANS NIL))
      (THGOAL-2 (CURRENT-BINDING-LIST '(X ANS))
		'FALLIBLE (ivc 'X)
		(FUNCTION (LAMBDA (E) E
				  (SETQ ANS (CONS X ANS)))))
      ANS)))

;(THCONSE (X) (FALLIBLE $?X)
;  (THGOAL (HUMAN $?X)))
(LOCAL-DECLARE ((SPECIAL P1 P2))
(DEFUN THCONSE-2-A (VAR-ENV CONT P1 P2)
   (COND ((EQ P1 'FALLIBLE)
	  (THGOAL-2 VAR-ENV 'HUMAN (ivc 'P2) CONT)))))

;(THCONSE (X) (HUMAN $?X)
;  (THGOAL (GREEK $?X)))
(LOCAL-DECLARE ((SPECIAL P1 P2))
(DEFUN THCONSE-2-B (VAR-ENV CONT P1 P2) 
   (COND ((EQ P1 'HUMAN)
	  (THGOAL-2 VAR-ENV 'GREEK (ivc 'P2) CONT)))))

(DEFUN THASS-2 (L1 L2 &AUX ASS)   ;SIMPLE ASSERTION, TWO LONG
   (SETQ ASS (LIST L1 L2))
   (COND ((NOT (MEMBER ASS TWO-ELEMENT-ASSERTIONS-LIST))
	  (SETQ TWO-ELEMENT-ASSERTIONS-LIST 
		(CONS ASS TWO-ELEMENT-ASSERTIONS-LIST)))))

(DEFUN THASST-2 (TH)		;ASSERT CONSEQUENT THEOREM, TWO LONG
   (COND ((NOT (MEMQ TH TWO-ELEMENT-CONSEQUENTS-LIST))
	  (SETQ TWO-ELEMENT-CONSEQUENTS-LIST 
		(CONS TH TWO-ELEMENT-CONSEQUENTS-LIST)))))

(LOCAL-DECLARE ((SPECIAL E1 E2))
(DEFUN THGOAL-2 (VAR-ENV E1 E2 CONT)    ;ACHIEVE GOAL, TWO LONG
  (FORMAT T "~%THGOAL: ~s (dtp ~s) ~s (dtp ~s) "
	  E1 (%DATA-TYPE (ivc 'E1))
	  E2 (%DATA-TYPE (ivc 'E2)))
   (DOLIST (AS TWO-ELEMENT-ASSERTIONS-LIST)
       (COND ((EQ E1 'UNASSIGNED)
	      (SETQ E1 (FIRST AS))
	      (COND ((EQ E2 'UNASSIGNED)
		     (SETQ E2 (SECOND AS))
		     (CALL-CONTINUATION CONT VAR-ENV)
		     (SETQ E2 'UNASSIGNED))
		    ((EQ E2 (SECOND AS))
		     (CALL-CONTINUATION CONT VAR-ENV)))
	      (SETQ E1 'UNASSIGNED))
	     ((EQ E1 (FIRST AS))
	      (COND ((EQ E2 'UNASSIGNED)
		     (SETQ E2 (SECOND AS))
		     (CALL-CONTINUATION CONT VAR-ENV)
		     (SETQ E2 'UNASSIGNED))
		    ((EQ E2 (SECOND AS))
		     (CALL-CONTINUATION CONT VAR-ENV))))))
   (DOLIST (TH TWO-ELEMENT-CONSEQUENTS-LIST)
       (COMMENT (FORMAT T "~%Trying consequent theorm (~s ~s ~s)" TH E1 E2))
       (FUNCALL TH VAR-ENV CONT (ivc 'E1) (ivc 'E2)))))



